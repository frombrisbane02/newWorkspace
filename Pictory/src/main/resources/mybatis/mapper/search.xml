<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!--
	[쿼리문 작성법]
	A. 값에 해당하는 부분은 #{변수}
	B. 객체에 해당하는 부분은 ${변수} 객체은 테이블명 혹은 컬럼명등을 의미
	C. #{변수} 작성시 parameterType이 Map인 경우는 키값을
	     자바빈(DTO계열)인 경우는 자바빈의 속성명(멤버변수명) 이어야 한다
	     단,parameterType이 int나 String인 경우는 임의값을 줘도 무방
	D. 쿼리문안에  >,>= ,<,<=등의 비교 연산자를 사용하는 경우 에러
	  	1. <![CDATA[     ]]> CDATA섹션을 사용하거나
	  		예]
	  		SELECT * FROM emp
	  		<![CDATA[
	  		WHERE sal >= 3000
	  		]]>
	  		CDATA섹션의 문자열은 단순 텍스트로 처리한다
	  	2. 특수문자를 사용한다 즉 >은 &gt; < 은 &lt;
	  	   예]
	  	  SELECT * FROM emp
	  	  WHERE sal &gt;= 3000
	 -->
<mapper namespace="mybatis.mapper.search">	
	<!-- SearchDao에 searchInsert 추가-->
	<!-- 통합검색 쿼리문 -->
	<select id="searchSelect" parameterType="Map" resultType="searchDTO">					
		SELECT * from 
			(SELECT po.postno,
			            po.postcategory,
			            po.posttitle,
			               po.POSTTEXT,
			            u.usernickname,
			            u.userprofile,
			            u.userno,
			            po.posthits,
			            po.postsellornot,
			            (SELECT COUNT(*) FROM likes lk WHERE lk.postno=po.postno) postlikes,
			            (SELECT ph.photourl FROM photo ph WHERE ph.postno=po.postno AND ROWNUM = 1) photourl,
			            (SELECT COUNT(*) FROM likes lk WHERE lk.userno=1 AND lk.postno=po.postno) likecnt,
			            (SELECT COUNT(ct.cno) FROM comment_tbl ct WHERE ct.postno=po.postno) commentcnt,
			               (SELECT hashtag FROM hashtag hs WHERE hs.postno=po.postno AND HASHTAG LIKE '%'|| #{searchName} || '%') hashtag,
			            s.sno,
			            s.storytitle,
			            s.storythumbnail
			        FROM post po INNER JOIN users u
			           ON po.userno = u.userno
			   LEFT OUTER JOIN story s
			         ON po.sno = s.sno) a
			where  a.POSTTITLE LIKE '%'|| #{searchName} || '%' 
			    OR a.POSTTEXT LIKE '%'|| #{searchName} || '%'  
			    OR a.hashtag LIKE '%'|| #{searchName} || '%'
        	ORDER BY POSTNO DESC
	</select>
	
	<!-- 포스트 최신순 검색 쿼리문 -->
	<select id="searchPostRecent" parameterType="Map" >
		SELECT * FROM POST ORDER BY POSTNO DESC
	</select>
	
	
	<!-- 카테고리별 조회 -->
	<select id="categorySelect" parameterType="Map" resultType="String">
		<!-- SELECT POSTCATEGORY FROM POST WHERE POSTCATEGORY='%'|| #{postCategory} || '%'  -->
		 SELECT po.postno,
      		po.postcategory,
            po.posttitle,
            u.usernickname,
            u.userprofile,
            u.userno,
            po.posthits,
            (SELECT COUNT(l.postNo) FROM LIKES l WHERE l.postno=po.postno) postLikes,
            (SELECT ph.photourl FROM photo ph WHERE ph.postno=po.postno AND ROWNUM = 1) photoUrl,
            (SELECT COUNT(ct.cno) FROM comment_tbl ct WHERE ct.postno=po.postno) commentCount
        FROM post po INNER JOIN users u
           ON po.userno = u.userno
    	WHERE po.postcategory IN
    	#{postCategory}
    	ORDER BY po.postdate DESC
	</select>
	
	<!-- 검색페이지 좋아요 -->
	<select id="searchLike" resultType="int" parameterType="Map">
		SELECT count(*) FROM likes WHERE userNo = (SELECT userNo FROM users WHERE userId=#{userId}) AND postNo=#{postNo}
	</select>
	
	<insert id="searchlikeUp">
		INSERT INTO likes VALUES((SELECT userNo FROM users WHERE userId=#{userId}),#{postNo})
	</insert>
	<delete id="searchlikeDown" parameterType="Map">
		DELETE FROM LIKES WHERE userNo=(SELECT userNo FROM users WHERE userId=#{userId}) AND postNo=#{postNo}
	</delete>
	
	<select id="getsearchlikes" parameterType="Map" resultType="int">
		SELECT COUNT(l.postNo) FROM LIKES l WHERE l.postno=#{postNo}
	</select>
	
	<insert id="insertSearchLikeAlarm" parameterType="Map">
		<selectKey keyProperty="alarmNo" resultType="int" order="BEFORE">
			SELECT SEQ_ALARM.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO ALARM VALUES(SEQ_ALARM.CURRVAL,#{alarmType},DEFAULT,DEFAULT,(SELECT userNo FROM POST WHERE postNo=#{postNo}),(SELECT userNickname FROM USERS WHERE userId=#{userId}),(SELECT postTitle FROM POST WHERE postNo=#{postNo}),#{alarmType})
	</insert>
	
	<delete id="deleteSearchLikeAlarm" parameterType="Map">
		DELETE ALARM WHERE alarmtype=#{alarmType} AND receiver IN (SELECT userNo FROM POST WHERE postNo=#{postNo}) AND eventuser IN (SELECT userNickname FROM USERS WHERE userId=#{userId})
	</delete>
	
	
	
	
	
	
</mapper>