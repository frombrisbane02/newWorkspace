<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

 <!-- 글한번올라갈때 테이블 채울거 필수: post, photo 선택: hashtag,map,text,product,museum 등 -->
 <!-- postNo, userNo, sNo, postTitle, postHits, postSellorNot, postCategory, postText, postLikes, postDate -->
<mapper namespace="mybatis.mapper.gallery">
	
	<!-- 필요 인자: 카테고리, 해시태그, 첫번째 이미지 url(썸네일용), 좋아요수, 댓글 수 -->
	<select id="galleryList" resultType="GalleryDTO" parameterType="string">		
        SELECT po.postno,
      		po.postcategory,
            po.posttitle,
            po.postsellornot,
            u.usernickname,
            u.userprofile,
            u.userno,
            po.posthits,
            (SELECT COUNT(l.postNo) FROM LIKES l WHERE l.postno=po.postno) postLikes,
            (SELECT ph.photourl FROM photo ph WHERE ph.postno=po.postno AND ROWNUM = 1) photourl,
            (SELECT COUNT(ct.cno) FROM comment_tbl ct WHERE ct.postno=po.postno) commentCount
        FROM post po INNER JOIN users u
           ON po.userno = u.userno
     	ORDER BY po.postNo DESC
	</select>
	
	<select id="hashlist" resultType="GalleryDTO">
		SELECT h.hashtag, p.postno
		FROM HASHTAG h, POST p
		WHERE h.postno=p.postno
	</select>
	
	<select id="photoList" resultType="GalleryDTO" parameterType="_integer">
		SELECT photoUrl FROM PHOTO WHERE postNo=#{postNo}
	</select>
	
	<select id="galleryView" resultType="GalleryDTO" parameterType="_integer">
       SELECT po.postno,
      		po.postcategory,
            po.posttitle,
            po.postText,
            po.postDate,
            po.postSellorNot,
            u.usernickname,
            u.userprofile,
            u.userno,
            u.userId,
            po.posthits,
            po.postLikes,
            (SELECT COUNT(ct.cno) FROM comment_tbl ct WHERE ct.postno=po.postno) commentCount
        FROM post po INNER JOIN users u
           ON po.userno = u.userno
    	WHERE po.postNo=#{postNo}
	</select>
	
	<select id="userInfo" resultType="GalleryDTO" parameterType="_integer">
	SELECT (SELECT COUNT(p.postNo) FROM post p, users u WHERE p.userno=u.userno and u.userno=(SELECT p.userno FROM POST p WHERE p.postNo=#{postNo})) postCount,
			u.userNo,
			u.userNickname,
			u.userProfile
		 FROM post p INNER JOIN users u ON p.userno = u.userno
		 WHERE u.userno IN (SELECT p.userno FROM POST p WHERE p.postNo=#{postNo})
     	ORDER BY p.postNo DESC
	</select>
	
	<!-- PostNo 가지고 댓글 목록(답글 포함) 가져오기 -->
	<select id="getComments" resultType="GalleryDTO" parameterType="_integer">
		SELECT c.cNo, c.userNo, c.cText, c.cLevel, c.cDate,c.parentCNo, u.userProfile, u.userNickname
		FROM USERS u, COMMENT_TBL c
		WHERE c.postNo=#{postNo} AND u.userNO=c.userNo
		ORDER BY c.cDate DESC
	</select>
	
	<select id="isSellorNot" resultType="int" parameterType="_integer">
		SELECT COUNT(postSellorNot)
        FROM POST p
        WHERE p.postno=#{postNo} AND p.postSellorNot=1
	</select>
	
	<select id="getProductInfo" resultType="GalleryDTO" parameterType="_integer">
		SELECT *
		FROM PRODUCT
		WHERE photoNo = (SELECT ph.photono FROM PHOTO ph WHERE ph.postno=#{postNo})
	</select>

	<!-- 필요 인자: 카테고리, 해시태그, 첫번째 이미지 url(썸네일용), 좋아요수, 댓글 수 -->
	<select id="filter" resultType="GalleryDTO" parameterType="List">
  SELECT po.postno,
      		po.postcategory,
            po.posttitle,
            po.postsellornot,
            u.usernickname,
            u.userprofile,
            u.userno,
            po.posthits,
            (SELECT COUNT(l.postNo) FROM LIKES l WHERE l.postno=po.postno) postLikes,
            (SELECT ph.photourl FROM photo ph WHERE ph.postno=po.postno AND ROWNUM = 1) photourl,
            (SELECT COUNT(ct.cno) FROM comment_tbl ct WHERE ct.postno=po.postno) commentCount
        FROM post po INNER JOIN users u
           ON po.userno = u.userno
    	WHERE po.postcategory IN
    	<foreach collection="array" item="item" open="(" close=")" separator=",">
    	   #{item}
    	</foreach>
    	ORDER BY po.postdate DESC
	</select>
	
	<select id="getLoginInfo" resultType="GalleryDTO" parameterType="string">
		SELECT * FROM USERS
		WHERE userId=#{userId}
	</select>
	
	
	<select id="findUserNo" parameterType="Map" resultType="int">
		SELECT userNo FROM users WHERE userId=#{userId}
		
	</select>
	
	<select id="findLike" resultType="int" parameterType="Map">
		SELECT count(*) FROM likes WHERE userNo = (SELECT userNo FROM users WHERE userId=#{userId}) AND postNo=#{postNo}
	</select>
	
	<insert id="likeUp">
		INSERT INTO likes VALUES((SELECT userNo FROM users WHERE userId=#{userId}),#{postNo})
	</insert>
	<delete id="likeDown" parameterType="Map">
		DELETE FROM LIKES WHERE userNo=(SELECT userNo FROM users WHERE userId=#{userId}) AND postNo=#{postNo}
	</delete>
	<select id="findUserPostno" resultType="int" parameterType="Map" >
		SELECT postNo FROM likes WHERE userNo = (SELECT userNo FROM users WHERE userId=#{userId})
	</select>
	
	<select id="getUserNo" parameterType="string" resultType="int">
		SELECT userNo FROM USERS WHERE userId = #{userId}
	</select>
	
	<insert id="insertComment" parameterType="Map">
		<selectKey keyProperty="cNo" resultType="int" order="BEFORE">
			SELECT SEQ_COMMENT_TBL.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO COMMENT_TBL VALUES(SEQ_COMMENT_TBL.CURRVAL,#{postNo},#{userNo},#{cText},1,SYSDATE,#{parentCNo, jdbcType=INTEGER})
	</insert>
	
	<select id="findCart" parameterType="map" resultType="int">
	 SELECT count(c.pdNo) FROM CART c WHERE c.pdNo=#{pdNo} AND c.userNo=(SELECT userNo FROM USERS WHERE userId=#{userId})
	</select>
	
	<insert id="insertCart" parameterType="Map">
		INSERT INTO CART VALUES((SELECT userNo FROM USERS WHERE userId=#{userId}),#{pdNo})
	</insert>
	
	<delete id="deleteCart" parameterType="Map">
		DELETE FROM CART WHERE userNo=(SELECT userNo FROM users WHERE userId=#{userId}) AND pdNo=#{pdNo}
	</delete>
	
	<select id="isMapAttached" parameterType="int" resultType="int">
		SELECT COUNT(markerLocation) FROM MAP WHERE postNo=#{postNo}
	</select>
	
	<select id="getMapInfo" parameterType="int" resultType="GalleryDTO">
		SELECT * FROM MAP WHERE postNo=#{postNo}
	</select>
	
	
	<select id="getpostlikes" parameterType="Map" resultType="int">
		SELECT COUNT(l.postNo) FROM LIKES l WHERE l.postno=#{postNo}
	</select>
	
	<select id="findCartinList" parameterType="Map" resultType="int">
		SELECT COUNT(c.pdNo) 
		FROM CART c 
		WHERE c.pdNo IN (SELECT p.pdNo FROM PRODUCT p WHERE p.photoNo IN (SELECT p.photoNo FROM PHOTO p WHERE p.postNo=#{postNo})) 
		AND c.userNo IN (SELECT u.userNo from USERS u WHERE userId=#{userId})
	</select>
	
	<select id="findPdNo" parameterType="Map" resultType="int">
		SELECT p.pdNo FROM PRODUCT p, USERS u 
		WHERE  p.photoNo=(SELECT p.photoNo FROM PHOTO p WHERE p.postNo=#{postNo}) 
		AND u.userNo=(SELECT u.userNo from USERS u WHERE userId=#{userId})
	</select>
	
	<insert id="insertLikeAlarm" parameterType="Map">
		<selectKey keyProperty="alarmNo" resultType="int" order="BEFORE">
			SELECT SEQ_ALARM.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO ALARM VALUES(SEQ_ALARM.CURRVAL,#{alarmType},DEFAULT,DEFAULT,(SELECT userNo FROM POST WHERE postNo=#{postNo}),(SELECT userNickname FROM USERS WHERE userId=#{userId}),(SELECT postTitle FROM POST WHERE postNo=#{postNo}),#{alarmType})
	</insert>
	<delete id="deleteLikeAlarm" parameterType="Map">
		DELETE ALARM WHERE alarmtype=#{alarmType} AND receiver IN (SELECT userNo FROM POST WHERE postNo=#{postNo}) AND eventuser IN (SELECT userNickname FROM USERS WHERE userId=#{userId})
	</delete>
	
	<insert id="insertCommentAlarm" parameterType="Map">
		<selectKey keyProperty="alarmNo" resultType="int" order="BEFORE">
			SELECT SEQ_ALARM.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO ALARM VALUES(SEQ_ALARM.CURRVAL,'comment',DEFAULT,DEFAULT,(SELECT userNo FROM POST WHERE postNo=#{postNo}),(SELECT userNickName FROM USERS WHERE userId=#{userId}),(SELECT postTitle FROM POST WHERE postNo=#{postNo}),#{cText})
	</insert>
	
	<select id="getAlarmpostNo" parameterType="String" resultType="int">
		SELECT postNo FROM POST WHERE postTitle=#{postTitle}
	</select>
	<select id="getAlarmUserId" parameterType="int" resultType="String">
		SELECT userID FROM USERS WHERE userNo=#{userNo}
	</select>
	
		<select id="sell" resultType="GalleryDTO" parameterType="String">
    SELECT p.postno,
      	p.postcategory,
            p.posttitle,
            p.postText,
            p.postDate,
            p.postSellorNot,
            u.usernickname,
            u.userprofile,
            u.userno,
            u.userId,
            p.posthits,
            p.postLikes,
            ph.photoName,
            ph.photoUrl
        FROM post p
        inner join users u on p.userno = u.userno
        inner join photo ph on p.postno = ph.postno
     WHERE p.postSellorNot=1
	</select>
	
	<delete id="postDelete" parameterType="Map">
		DELETE FROM POST WHERE postNo=#{postNo}
	</delete>
	
</mapper>